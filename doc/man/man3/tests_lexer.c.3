.TH "tests/tests_lexer.c" 3 "Wed May 13 2020" "Version v0.1" "42h" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tests/tests_lexer.c
.SH SYNOPSIS
.br
.PP
\fC#include <criterion/criterion\&.h>\fP
.br
\fC#include 'lexer/lexer\&.h'\fP
.br
\fC#include 'utils/string_utils\&.h'\fP
.br
\fC#include '\&.\&./garbage_collector/garbage_collector\&.h'\fP
.br
\fC#include '\&.\&./storage/program_data_storage\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, basic_tokens)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, basic_word_tokens)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, newline)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, eof)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, backslash)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, io_number)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, spaced_redirections)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, no_spaced_redirections)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, semicolon)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, not)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, curly_braces)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, assignment_word)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, variables)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, parenthesis)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, parenthesis2)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, comments)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, if_test)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, if_test2)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, dollar)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, hard_stuck)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, cmd_substitution)"
.br
.ti -1c
.RI "\fBTest\fP (\fBlexer\fP, hard_cmd_substitution)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "Test (\fBlexer\fP, basic_tokens)"

.SS "Test (\fBlexer\fP, basic_word_tokens)"

.SS "Test (\fBlexer\fP, newline)"

.SS "Test (\fBlexer\fP, eof)"

.SS "Test (\fBlexer\fP, backslash)"

.SS "Test (\fBlexer\fP, io_number)"

.SS "Test (\fBlexer\fP, spaced_redirections)"

.SS "Test (\fBlexer\fP, no_spaced_redirections)"

.SS "Test (\fBlexer\fP, semicolon)"

.SS "Test (\fBlexer\fP, not)"

.SS "Test (\fBlexer\fP, curly_braces)"

.SS "Test (\fBlexer\fP, assignment_word)"

.SS "Test (\fBlexer\fP, variables)"

.SS "Test (\fBlexer\fP, parenthesis)"

.SS "Test (\fBlexer\fP, parenthesis2)"

.SS "Test (\fBlexer\fP, comments)"

.SS "Test (\fBlexer\fP, if_test)"

.SS "Test (\fBlexer\fP, if_test2)"

.SS "Test (\fBlexer\fP, dollar)"

.SS "Test (\fBlexer\fP, hard_stuck)"

.SS "Test (\fBlexer\fP, cmd_substitution)"

.SS "Test (\fBlexer\fP, hard_cmd_substitution)"

.SH "Author"
.PP 
Generated automatically by Doxygen for 42h from the source code\&.
